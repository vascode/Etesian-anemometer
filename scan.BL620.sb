//******************************************************************************
// Definitions
//******************************************************************************
       
	   //Set this to 0 to disable all debugging messages
#define ENABLE_DEBUG_PRINTS                  1
#define SPACE_IN_STABLE 					 10	// available space for scaned device at a time

//******************************************************************************
// Register Error Handler as early as possible
//******************************************************************************
sub HandlerOnErr()
  if (ENABLE_DEBUG_PRINTS!=0) then
    print "\n OnErr - ";GetLastError();"\n"
  endif
endsub
onerror next HandlerOnErr

//******************************************************************************
// Debugging resource 
//******************************************************************************

sub DbgMsg(byval msg$ as string)
  if (ENABLE_DEBUG_PRINTS!=0) then
    print "\n";msg$
  endif
endsub

//******************************************************************************
// Global Variable Declarations
//******************************************************************************
 
dim rc
dim scanTableMac[SPACE_IN_STABLE] AS STRING		// Table for scanned BLE devices Mac address (database)
dim scanTableData[SPACE_IN_STABLE] AS STRING	// Table for scanned data in BL600's advert
dim scanTableRssi[SPACE_IN_STABLE] AS INTEGER	// Table for scanned BL600's RSSI


dim arrIndex	//Index for scan array
dim preAdvCount	// The number of devices in scan array

//This should be gone as we will look for device name instead of mac
dim deviceMac$	//Mac address for intended device

//******************************************************************************
// Initialisse Global Variable
//******************************************************************************
arrIndex = 0
deviceMac$ = "01CC09A66FC16A"
preAdvCount = 0 

//******************************************************************************
// Function and Subroutine definitions
//******************************************************************************
function InArray(byRef addr$ as string) as integer
	dim i, rc2, hexAddr$
	rc2 = 1	//if no matching address is found, return 1
	hexAddr$ = strhexize$(addr$)	//strhexize the addr$ to compare with one in scanTableMac[]	
	
	// for i = 0 to SPACE_IN_STABLE - 1
	for i = 0 to arrIndex
		if strCmp(scanTableMac[i], hexAddr$) == 0 then
			exitfunc 0 // rc2 = 0 // Success! found matching address -> return 0
		endif
	next 
endfunc rc2


//==============================================================================
// This function is called to show data => Company ID + Temperature + Wind Speed + Sendsor ID + Wind Direction
//==============================================================================
function DisplayData(byval mac$ as string) as integer
	dim i, comID, windSpd, sensorID, windDir, emptyStr$
	emptyStr$ =""
	DbgMsg("\nDisplaying data\n")
	for i = 0 to SPACE_IN_STABLE - 1
		
		//If find corresponding MAC address in database
		if strCmp(scanTableMac[i], mac$) == 0 then
			
			//STRSPLITLEFT$ can be used to extract data
			print "addr: ";scanTableMac[i];" Data : ";scanTableData[i];" RSSI: ";scanTableRssi[i];
			
			
			exitfunc 0 //Success. Found matching MAC address
		
		// If reached the end of array. Failed to find matching MAC address.	
		elseif strCmp(scanTableMac[i],emptyStr$) == 0 then
			exitfunc 1  
		endif
		
	next
	

endfunc 1	//Failed to find matching addr

//******************************************************************************
// Handler definitions
//******************************************************************************

//==============================================================================
// This handler is called when there is a scan attempt timeout
//==============================================================================
function HandlerBlrScanTimOut() as integer
  DbgMsg( "\nScanning stopped via timeout" )
  // Dispaly data if MAC address is matched
  rc = DisplayData(deviceMac$)
endfunc 1

//==============================================================================
// This handler is called when there is an advert report waiting to be read
//==============================================================================
function HandlerAdvRpt() as integer
  dim ad$, dta$, ndisc, rsi
  
  rc = BleScanGetAdvReport(ad$,dta$,ndisc,rsi)  
  while rc==0
	// Run below if the device was not scanned before
	if InArray(ad$) == 1 then
		// If scan array is completed filled, reset the array
		if arrIndex >= SPACE_IN_STABLE then
			for arrIndex = 0 to SPACE_IN_STABLE
				DbgMsg ("\nReset the scan array")
				scanTableMac[arrIndex] = ""
				scanTableData[arrIndex] = ""
				scanTableRssi[arrIndex] = 0
			next
			arrIndex = 0
		
		// Add scanned device to scan array
		else 		
			print "\nADV:";strhexize$(ad$);" ";strhexize$(dta$);" ";ndisc;" ";rsi		
			//This will be replaced so that only intended device info is stored
			scanTableMac[arrIndex] = strhexize$(ad$)
			scanTableData[arrIndex] = strhexize$(dta$)
			scanTableRssi[arrIndex] = rsi
			arrIndex = arrIndex + 1				
		endif
	endif
    rc = BleScanGetAdvReport(ad$,dta$,ndisc,rsi)
  endwhile
endfunc 1

//==============================================================================
// This handler is called when there is a scan attempt timeout
//==============================================================================
function HandlerFastPaged() as integer
  dim ad$,rsi
  rc = BleScanGetPagerAddr(ad$,rsi)
  if rc != 0 then
    DbgMsg( "\nBleScanGetPagerAddr() failed " )
  endif
  print "\nFast Paged by : "; strhexize$(ad$); " rssi = ";rsi

endfunc 1

//******************************************************************************
//******************************************************************************
// Equivalent to main() in C
//******************************************************************************

OnEvent  EVBLE_SCAN_TIMEOUT       call HandlerBlrScanTimOut
OnEvent  EVBLE_ADV_REPORT         call HandlerAdvRpt
OnEvent  EVBLE_FAST_PAGED         call HandlerFastPaged

rc = BleScanStart(3000, 0)

waitevent 