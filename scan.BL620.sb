//******************************************************************************
// Definitions
//******************************************************************************
       
	   //Set this to 0 to disable all debugging messages
#define ENABLE_DEBUG_PRINTS			1
#define SPACE_IN_SCAN_TABLE			10	// available space for scaned device at a time
#define DEVICENAME					"Etesian"

//******************************************************************************
// Register Error Handler as early as possible
//******************************************************************************
sub HandlerOnErr()
  if (ENABLE_DEBUG_PRINTS!=0) then
    print "\n OnErr - ";GetLastError();"\n"
  endif
endsub
onerror next HandlerOnErr

//******************************************************************************
// Debugging resource 
//******************************************************************************

sub DbgMsg(byval msg$ as string)
  if (ENABLE_DEBUG_PRINTS!=0) then
    print "\n";msg$
  endif
endsub

//******************************************************************************
// Global Variable Declarations
//******************************************************************************

dim rc
dim scanTableMac[SPACE_IN_SCAN_TABLE] as string		// Table for scanned BLE devices Mac address (database)
dim arrIndex as integer		// Index for scan array

//******************************************************************************
// Initialisse Global Variable
//******************************************************************************
arrIndex = 0

//******************************************************************************
// Function and Subroutine definitions
//******************************************************************************

//==============================================================================
// Check to see via addr$ if device has been scanned
//==============================================================================
function InArray(byRef addr$ as string) as integer
	dim i, hexAddr$
	hexAddr$ = strhexize$(addr$)	//strhexize the addr$ to compare with one in scanTableMac[]	
	
	for i = 0 to arrIndex
		if strCmp(scanTableMac[i], hexAddr$) == 0 then
			// Success! found matching address -> return 0
			exitfunc 0 
		endif
	next 
endfunc 1 //no matching address is found, return 2

//==============================================================================
// Get device name
//==============================================================================
function getDeviceName(byval data$ as string) as string
	dim devName$ as string	// Device name
	
	// Get device name via data type 0x08
	rc = BLEGETADBYTAG(data$, 8, devName$)
	if (rc != 0) then
		// Name not found at index 0x08, check 0x09
		rc = BLEGETADBYTAG(data$, 9, devName$)
	endif
endfunc devName$

//==============================================================================
//This function removes leading 0s from the front of a string
//==============================================================================
FUNCTION removeZeros(data$) AS STRING
	dim i, Done, tmpStr$ : i = 0 : Done = 0
	WHILE (i < strlen(data$))
		tmpStr$ = MID$(data$, i, 1)
		IF (STRCMP(tmpStr$, "0") != 0) THEN
			//Other number found - cut string to this length and mark as finished
			tmpStr$ = RIGHT$(data$, strlen(data$)-i)
			i = strlen(data$)
			Done = 1
		ENDIF
		i = i+1
	ENDWHILE

	IF (Done == 0) THEN
		//Other number not found in provided string
		tmpStr$ = "0"
	ENDIF
ENDFUNC tmpStr$

//==============================================================================
// This function is called to show data => Company ID + Temperature + Wind Speed + Sendsor ID + Wind Direction
// This needs to be gone as I will display data in HandlerAdvRpt
//==============================================================================
function showAdvData(byval data$ as string) as integer
	dim tmpVal, tmpStr$, tmpStr2$
	tmpVal = 0
	
	print "Advertising data [hex]:\n"
	while (tmpVal <= 0xff) 
		if (tmpVal == 8) then
			// Skip name tags
			tmpVal = 10
		endif
		rc = BLEGETADBYTAG(data$, tmpVal, tmpStr$)
		if (rc == 0) then
			// Output tag
			tmpStr2$ = ""
			SPRINT #tmpStr2$,INTEGER.H'tmpVal
			tmpStr2$ = removeZeros(tmpStr2$)
			PRINT "  Length: ";strlen(tmpStr$);", Type: 0x";tmpStr2$;", Value: ";STRHEXIZE$(tmpStr$);"\n"
		endif
		tmpVal = tmpVal+1
	endwhile	
endfunc 0

//******************************************************************************
// Handler definitions
//******************************************************************************

//==============================================================================
// This handler is called when there is a scan attempt timeout
//==============================================================================
function HandlerBlrScanTimOut() as integer
  DbgMsg( "\nScanning stopped via timeout" )
endfunc 0

//==============================================================================
// This handler is called when there is an advert report waiting to be read
//==============================================================================
function HandlerAdvRpt() as integer
  dim ad$, dta$, ndisc, rsi, dName$
  
  rc = BleScanGetAdvReport(ad$,dta$,ndisc,rsi)  
  while rc==0
	// Check if device name is DEVICENAME ("Etesian") && check if the device was not scanned before
	dName$ = getDeviceName(dta$)
	if strCmp(dName$, DEVICENAME) == 0 && InArray(ad$) == 1 then		
		// If can array is all filled with Etesian devices, reset the array
		if arrIndex >= SPACE_IN_SCAN_TABLE then
			for arrIndex = 0 to SPACE_IN_SCAN_TABLE
				DbgMsg ("\nReset the scan array")
				scanTableMac[arrIndex] = ""
			next
			arrIndex = 0			
		else 		
			//Show advert data
			print dName$;" (";strhexize$(ad$);")	RSSI: ";rsi;"\n"
			rc = showAdvData(dta$)

			// Add scanned device to scan array
			scanTableMac[arrIndex] = strhexize$(ad$)
			arrIndex = arrIndex + 1
		endif		
	endif 
    rc = BleScanGetAdvReport(ad$,dta$,ndisc,rsi)
  endwhile
endfunc 1

//******************************************************************************
//******************************************************************************
// Equivalent to main() in C
//******************************************************************************

OnEvent  EVBLE_SCAN_TIMEOUT       call HandlerBlrScanTimOut
OnEvent  EVBLE_ADV_REPORT         call HandlerAdvRpt

rc = BleScanStart(3000, 0)

waitevent 