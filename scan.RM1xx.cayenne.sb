//******************************************************************************
// Definitions
//******************************************************************************
       
//Set this to 0 to disable all debugging messages
#define ENABLE_DEBUG_PRINTS			1
#define SPACE_IN_SCAN_TABLE			5	// available space for scaned device at a time
#define DEVICENAME					"Etesian"
#define SCAN_SLEEP_MS	2000	// Need to be used for timer

#define LORAMAC_JOIN_BY_REQUEST 	1
#define LORAMAC_OPT_DATA_RATE 		2

#define LORAMAC_JOIN_BY_PERSONALIZATION          0 // Used with LORAMACJoin

#define NUM_OF_I_PARAMS                     (4)


//******************************************************************************
// Check Error code
//******************************************************************************

sub AssertRC(rc, line)
    if(rc!=0)then
        print "Failed with ";integer.h' rc;" on line ";line;"\n"
    endif
endsub

//******************************************************************************
// Register Error Handler as early as possible
//******************************************************************************
sub HandlerOnErr()
  if (ENABLE_DEBUG_PRINTS!=0) then
    print "\n OnErr - ";GetLastError();"\n"
  endif
endsub
onerror next HandlerOnErr

//******************************************************************************
// Debugging resource 
//******************************************************************************

sub DbgMsg(byval msg$ as string)
  if (ENABLE_DEBUG_PRINTS!=0) then
    print "\n";msg$
  endif
endsub

//******************************************************************************
// Library Import
//******************************************************************************
// #include "RM1xx-defs.h"

//******************************************************************************
// Global Variable Declarations
//******************************************************************************
dim rc
dim scanTableMac[SPACE_IN_SCAN_TABLE] as string		// Table for scanned BLE devices Mac address (database)
dim arrIndex as integer		// Index for scan array
dim str$

dim tkn$,tlen               //Used by command parser
dim urtcmd$                 //Cmd line from uart
dim i[NUM_OF_I_PARAMS]      //Index 0 used for return values
dim ok$,er$,pr$             //String for OK, ERROR and carriage return
dim urts                    //Will be <0 if uart parser suspended
dim stRsp$ as string        //Uart rx data is stored here

dim okToTx : okToTx = 1     //Available duty cycle on one of sub-band (only matters in EU & AS)
                            //Change to 0 at data Tx and 1 at EVLORAMACNEXTTX   

//******************************************************************************
// Initialisse Global Variable
//******************************************************************************
arrIndex = 0
ok$    = "\nOK"
er$    = "\nERROR "
pr$    = "\r\n>"


//******************************************************************************
// Function and Subroutine definitions
//******************************************************************************

//==============================================================================
SUB PrintMsg(str$)
    rc = UartWrite(str$)
ENDSUB

//==============================================================================
sub UartRsp(rsp as integer)
    if rsp == 0 then
        print ok$;pr$
    elseif rsp > 0 then 
        print er$;integer.h' rsp;pr$
    endif
    urts = rsp
endsub

//==============================================================================
function ExtractIntTokens(u$,stIdx,num)
    while num>0
        tlen = ExtractIntToken(u$,i[stIdx])
        if tlen == 0 then
            exitfunc 4
        endif
        num=num-1
        stIdx = stIdx+1
    endwhile
endfunc 0

//==============================================================================
// Check to see via addr$ if device has been scanned
//==============================================================================
function InArray(byRef addr$ as string) as integer
	dim i, hexAddr$
	hexAddr$ = strhexize$(addr$)	//strhexize the addr$ to compare with one in scanTableMac[]	
	
	for i = 0 to arrIndex
		if strCmp(scanTableMac[i], hexAddr$) == 0 then
			// Success! found matching address -> return 0
			exitfunc 0 
		endif
	next 
endfunc 1 //no matching address is found, return 2

//==============================================================================
// Check to see via addr$ if device has been scanned
//==============================================================================
function ResetScanTable()
	dim i
	for i = 0 to arrIndex
		scanTableMac[i]=""
	next
	arrIndex = 0 
endfunc 0 

//==============================================================================
// Get device name
//==============================================================================
function GetDeviceName(byval data$ as string) as string
	dim devName$ as string	// Device name
	
	// Get device name via data type 0x08
	rc = BLEGETADBYTAG(data$, 8, devName$)
	if (rc != 0) then
		// Name not found at index 0x08, check 0x09
		rc = BLEGETADBYTAG(data$, 9, devName$)
	endif
endfunc devName$

//==============================================================================
//This function removes leading 0s from the front of a string
//==============================================================================
FUNCTION RemoveZeros(data$) AS STRING
	dim i, Done, tmpStr$ : i = 0 : Done = 0
	WHILE (i < strlen(data$))
		tmpStr$ = MID$(data$, i, 1)
		IF (STRCMP(tmpStr$, "0") != 0) THEN
			//Other number found - cut string to this length and mark as finished
			tmpStr$ = RIGHT$(data$, strlen(data$)-i)
			i = strlen(data$)
			Done = 1
		ENDIF
		i = i+1
	ENDWHILE

	IF (Done == 0) THEN
		//Other number not found in provided string
		tmpStr$ = "0"
	ENDIF
ENDFUNC tmpStr$

//==============================================================================
// This function swaps first 8 bits and seconds 8 bits for 16 bits data
//==============================================================================
sub EndianSwap(byref atm)
    atm = (atm >> 8 & 0xFF) | (atm << 8 & 0xFF00)
endsub

//==============================================================================
// Show Advert Data according to data type
//==============================================================================
function ShowAdvData(byval data$ as string) as integer
	dim tmpVal, tmpStr$, tmpStr2$

	tmpVal = 0
	
	print "Advertising data [hex]:\n"
	while (tmpVal <= 0xff) 
		if (tmpVal == 8) then
			// Skip name tags
			tmpVal = 10
		endif
		rc = BLEGETADBYTAG(data$, tmpVal, tmpStr$)
		if (rc == 0) then
			// Output tag
			tmpStr2$ = ""
			SPRINT #tmpStr2$,INTEGER.H'tmpVal
			tmpStr2$ = RemoveZeros(tmpStr2$)
			PRINT "  Length: ";strlen(tmpStr$);", Type: 0x";tmpStr2$;", Value: ";STRHEXIZE$(tmpStr$);"\n"			
		endif
		tmpVal = tmpVal+1
	endwhile
endfunc 0

//==============================================================================
// Data consists of Company ID + Temperature + Wind Speed + Sendsor ID + Wind Direction
// This function shows ID, Temperature, Wind Speed, Wind Direction
//==============================================================================
function LoraTxASCII(byval data$ as string) as integer
	dim tmpVal
	// temperature, speed & direction for wind
	dim tmpStr$, tmpStr2$, id$, temp$, speed$, direction$
	
	// Display manufacturer specific data
	rc = BLEGETADBYTAG(data$, 0xff, tmpStr$)	
	tmpStr$ = STRHEXIZE$(tmpStr$)
	
	// Sensor_ID 
	tmpVal = StrHex2Bin(tmpStr$, 8)
	SPRINT #id$, integer.h' tmpVal	
	tmpVal = StrHex2Bin(tmpStr$, 10)	
	SPRINT #tmpStr2$, integer.h' tmpVal	
	id$ = RemoveZeros(id$) + RemoveZeros(tmpStr2$)	
	print "  Sensor ID : ";id$;"\n"
	
	
	// ***Data Conversion (10^4 scale)***
	// Temperature Calculation
	tmpVal = StrHex2Bin(tmpStr$, 4) 
	tmpVal = tmpVal * 8470 - 580000
	SPRINT #temp$, tmpVal
	temp$ = LEFT$(temp$, strlen(temp$) - 3)
	temp$ = LEFT$(temp$, strlen(temp$) - 1) + "." + RIGHT$(temp$, 1)
	print "     Temperature: ";temp$;"\n"
	
	// Wind speed Calculation
	tmpVal = StrHex2Bin(tmpStr$, 6)
	tmpVal = tmpVal * 3874 + 23400
	SPRINT #speed$, tmpVal
	speed$ = LEFT$(speed$, strlen(speed$) - 3)
	speed$ = LEFT$(speed$, strlen(speed$) - 1) + "." + RIGHT$(speed$, 1)
	print "     Wind speed: ";speed$;"\n"
	
	// Wind Direction Calculation
	tmpVal = StrHex2Bin(tmpStr$, 12)
	tmpVal = tmpVal * 14117
	SPRINT #direction$, tmpVal
	direction$ = LEFT$(direction$, strlen(direction$) -4)
	print "     Wind Direction: ";direction$;"\n"
	
	// Tx above three data over LoRa with confirmation request
	// This is for when gateway is set to network server
	tmpStr$ = "[ID: " + id$ + "] T: " + temp$ + ", S: " + speed$ + ",D: " + direction$
	rc = LORAMACTxData(1, tmpStr$ , 1)
endfunc 0

//==============================================================================
// Data consists of Company Temperature + Wind Speed + Sendsor ID + Wind Direction
// This function shows ID, Temperature, Wind Speed, Wind Direction to UART
// Data will be sent to Cayenne in hex format. 
//==============================================================================
function LoraTxCayenne(byval data$ as string) as integer
	if (okToTx == 1) then 

		dim tmpVal
		// temperature, speed & direction for wind
		dim tmpStr$, tmpStr2$, id$, temp$, speed$, direction$
		dim theoreticalMax, actualMax
		
		// Cayenne data channel + format
		dim idType$ : idType$="\01\02"		// sensor ID as "Analog Input"
		dim tempType$ : tempType$="\02\67"	// temperature type as "Temperature Sensor"
		dim speedType$ : speedType$="\03\02"	// wind speed type as "Analog Input"
		dim dirType$ : dirType$="\04\02"	// wind direction type as "Analog Input"
		
		// Display manufacturer specific data
		rc = BLEGETADBYTAG(data$, 0xff, tmpStr$)	
		tmpStr$ = STRHEXIZE$(tmpStr$)
		
		// Sensor_ID - reserved for channel 01 until Cayenne accepts integer type of data 
		tmpVal = StrHex2Bin(tmpStr$, 8)
		SPRINT #id$, integer.h' tmpVal
		tmpVal = StrHex2Bin(tmpStr$, 10)
		SPRINT #tmpStr2$, integer.h' tmpVal	
		id$ = RemoveZeros(id$) + RemoveZeros(tmpStr2$)
		print "  Sensor ID : ";id$;"\n"
		
		// ***Data Conversion (10^4 scale)***
		// Temperature Calculation in Celsius combines a few calculation  
		// 	tmpVal = (tmpVal * 0.847058 - 58) * 10^4 / 10^4 to get temperature in F
		//	tmpVal = (tmpVal -32) * 10 / 18 to get temperature in C
		tmpVal = StrHex2Bin(tmpStr$, 4) 
		tmpVal = (tmpVal * 4706 - 500000)/1000 	// divided by 10^3 instead of 10^4 for decimal point
		SPRINT #tmpStr2$, tmpVal
		print "     Temperature: ";LEFT$(tmpStr2$, strlen(tmpStr2$)-1);".";RIGHT$(tmpStr2$,1);"\n"
		EndianSwap(tmpVal)
		rc = bleencode16(temp$, tmpVal,0)
		
		// Wind speed Calculation
		// tmpVal = (tmpVal * 0.3874 +2.34) * 10^4 / 10^4 
		tmpVal = StrHex2Bin(tmpStr$, 6)
		tmpVal = (tmpVal * 3874 + 23400)/100
		SPRINT #tmpStr2$, tmpVal
		print "     Wind speed: ";LEFT$(tmpStr2$, strlen(tmpStr2$) - 2) + "." + RIGHT$(tmpStr2$, 2);"\n"
		EndianSwap(tmpVal)
		rc = bleencode16(speed$, tmpVal,0)
		
		// Wind Direction Calculation
		// tmpVal = (D * 1.4117647) * 10^4 / 10^4
		tmpVal = StrHex2Bin(tmpStr$, 12)
		tmpVal = (tmpVal * 14117)/100
		SPRINT #tmpStr2$, tmpVal
		print "     Wind Direction: ";LEFT$(tmpStr2$, strlen(tmpStr2$) - 2) + "." + RIGHT$(tmpStr2$, 2);"\n"
		EndianSwap(tmpVal)
		rc = bleencode16(direction$, tmpVal,0)

		// Tx above three data over LoRa with confirmation request
		tmpStr$ = tempType$ + temp$ + speedType$ + speed$ + dirType$ + direction$
		
		//Check the size of data is within maximum payload size 
        rc = LoramacQueryTxPossible(strlen(tmpStr$), theoreticalMax, actualMax)
        if (rc == 0) then
            //Current data rate can handle the outbound data size 
			rc = LORAMACTxData(1, tmpStr$ , 1)
AssertRC(rc, 1)
        else
            print "\nData payload is too large for current data rate"
            print "\n   Theoretical max payload at current data rate : ";theoreticalMax;
            print "\n   Actual max payload at current data rate: ";actualMax;
            print "\n   Size of data currently attempting to transmit: ";strlen(tmpStr$)
            
            //Increase data rate by one
            rc = LORAMACGetOption(LORAMAC_OPT_DATA_RATE, str$)
            dim dr : dr = StrValDec(str$)
            if (dr <= 4) then
                dr = dr + 1
                sprint #str$, dr
                print "\nRaising data rate to DR";dr;" for higher max payload\n"            
            endif
            rc = LORAMACSetOption(LORAMAC_OPT_DATA_RATE, str$)
        endif
	else
		str$ = "\nThere is no available duty cycle"
        PrintMsg(str$)
	endif
endfunc 0

//==============================================================================
// This function is used to send data to Semtech website. 
// In graph, pressure section will be used to show wind speed data
// In graph, battery section will be used to show wind direction data
//==============================================================================
function LoRaTxToSemtech(byval data$) as integer
	dim tmpVal
	// temperature, speed & direction for wind
	dim tmpStr$, temp, speed, direction
	
	// Display manufacturer specific data
	rc = BLEGETADBYTAG(data$, 0xff, tmpStr$)	
	tmpStr$ = STRHEXIZE$(tmpStr$)
	
	// ***Data Conversion (10^4 scale)***
	// Temperature Calculation
	tmpVal = StrHex2Bin(tmpStr$, 4) 
	tmpVal = tmpVal * 8470 - 580000
	temp = tmpVal/10000
	print "     Temperature: ";temp;"\n"
	
	// Wind speed Calculation
	tmpVal = StrHex2Bin(tmpStr$, 6)
	tmpVal = tmpVal * 3874 + 23400
	speed = tmpVal/10000
	print "     Wind speed: ";speed;"\n"
	
	// Wind Direction Calculation
	tmpVal = StrHex2Bin(tmpStr$, 12)
	tmpVal = tmpVal * 14117
	direction = tmpVal/10000
	print "     Wind Direction: ";direction;"\n"

	// When application server is @ semtech => use 16 byte data format
	// This can be used when only one Etesian device is detected as it does not show ID 
	// tmpStr$ = "\00\00\00\00\00\00\00\00\3A\6D\4B\C6\07\EC\00\85" 	// with Akron location
	tmpStr$ = "\00\00\00\07\00\00\80\00\00\00\00\00\00\00\00\85" 	// with no location info
	rc=StrSetChr(tmpStr$,speed,2)		// use Pressure section for speed
	rc=StrSetChr(tmpStr$,direction,7)	//use battery section for direction
	rc=StrSetChr(tmpStr$,temp,4)		//use temperature section for temp
	rc = LORAMACTxData(1, tmpStr$ , 1)

endfunc 0

sub WelcomeMsg()
	print "********************************************************\n"
	print "This application will join the LoRa gateway.\n"
	print "Then it will update infomation for Etesian's anemometer.\n"
	print "********************************************************\n\n"
endsub

//==============================================================================
//#CMD#// lora join  
//#CMD#// lora activate 
//#CMD#// lora send  #STRdata#  #INTport#  #INTconfirm# 
//#CMD#// lora post 
//#CMD#// lora get  #INToptID#
//#CMD#// lora set #INToptID#  #INToptVal# 
//#CMD#// lora debug  #INTdebug#  #INTtxSio# #INTrxSio#
//==============================================================================
function _Lora()
    dim prAdr$ 
    dim val
    dim res
    dim reg
    dim stringVal$
    tlen = ExtractStrToken(urtcmd$,tkn$)
    if tlen == 0 then
        exitfunc 5
    elseif strcmp(tkn$,"join")==0 then
        exitfunc LORAMACJoin(LORAMAC_JOIN_BY_REQUEST)
    elseif strcmp(tkn$, "activate")==0 then
        exitfunc LORAMACJoin(LORAMAC_JOIN_BY_PERSONALIZATION)
    elseif strcmp(tkn$,"send")==0 then
        // #>lora send <data> <port> <confirm>
        rc = ExtractStrToken(urtcmd$, tkn$)
        rc = ExtractIntTokens(urtcmd$,1,2)
        exitfunc LORAMACTxData(i[1], tkn$, i[2])     
    elseif strcmp(tkn$,"get")==0 then
        rc = ExtractIntToken(urtcmd$,reg)
        rc = LORAMACGetOption(reg, stringVal$)
        print stringVal$
        exitfunc rc
    elseif strcmp(tkn$,"set")==0 then
        rc = ExtractIntToken(urtcmd$,reg)
        rc = ExtractStrToken(urtcmd$,stringVal$)
        rc = LORAMACSetOption(reg, stringVal$)
        exitfunc rc
    elseif strcmp(tkn$,"debug")==0 then
        rc = ExtractIntTokens(urtcmd$,0,3)
        if rc == 0 then
            rc = LORAMACSetDebug(i[0],i[1],i[2])
        endif
        exitfunc rc
    endif
endfunc 5

//******************************************************************************
// Handler definitions
//******************************************************************************
function OnUartCmd() as integer
    dim inputVoltage_mV
    rc=1 //Assume there is an error
    tlen = ExtractStrToken(urtcmd$,tkn$) //Get first token
    if tlen == 0 then
        rc=0
    elseif tlen > 0 then
        if strcmp(tkn$,"lora") == 0 then
            rc = _Lora()
        elseif strcmp(tkn$,"volts") == 0 then
            inputVoltage_mV = ReadPwrSupplyMv()
            print "Input voltage = ";inputVoltage_mV;"mV\n"
            rc=0
        elseif strcmp(tkn$,"exit") == 0 then
            rc=0
            exitfunc 0
        endif
    endif
    //Send a response back to the user
    UartRsp(rc)
endfunc 1

//==============================================================================
// This handler is called when data has arrived at the serial port
//==============================================================================
function HandlerUartRxCmd() as integer
    dim nMatch
    if urts < 0 then
        //Uart parser is suspended
        exitfunc 1
    endif

    //Check if CR has been received
    nMatch=UartReadMatch(stRsp$,13)
    if nMatch!=0 then
        //CR exists in the input buffer
        urtcmd$ = strsplitleft$(stRsp$,nMatch)
        exitfunc OnUartCmd()
    endif
endfunc 1


//==============================================================================
// This handler is called when there is a scan attempt timeout
//==============================================================================
function HandlerBlrScanTimOut() as integer
  // DbgMsg( "Scanning stopped via timeout\n" )
	if arrIndex == 0 then 
		print "no Etesian device is found\n"
	endif
endfunc 1

//==============================================================================
// This handler is called when there is an advert report waiting to be read
//==============================================================================
function HandlerAdvRpt() as integer
  dim ad$, dta$, ndisc, rsi, dName$
  
  rc = BleScanGetAdvReport(ad$,dta$,ndisc,rsi)  
  while rc==0
	// Check if device name is DEVICENAME ("Etesian") && check if the device was not scanned before
	dName$ = GetDeviceName(dta$)
	if strCmp(dName$, DEVICENAME) == 0 && InArray(ad$) == 1 then		
		// If can array is all filled with Etesian devices, reset the array
		if arrIndex >= SPACE_IN_SCAN_TABLE then
			for arrIndex = 0 to SPACE_IN_SCAN_TABLE
				DbgMsg ("\nReset the scan array")
				scanTableMac[arrIndex] = ""
			next
			arrIndex = 0			
		else 		
			//Show advert data
			print "\n";dName$;" (";strhexize$(ad$);")	RSSI: ";rsi;"\n"
			// rc = showAdvData(dta$)
			// rc = LoraTxASCII(dta$)
			rc = LoraTxCayenne(dta$)
			// rc = LoRaTxToSemtech(dta$)

			// Add scanned device to scan array
			scanTableMac[arrIndex] = strhexize$(ad$)
			arrIndex = arrIndex + 1
		endif		
	endif 
    rc = BleScanGetAdvReport(ad$,dta$,ndisc,rsi)
  endwhile
endfunc 1

//==============================================================================
// This handler is called when the LoRa Join procedure starts
//==============================================================================
function HandlerLoRaJoining() as integer
	print "Attempting to join the LoRa network\n"
endfunc 1

//==============================================================================
// This handler is called when the LoRa Join Process completes successfully
//==============================================================================
function HandlerLoRaJoined() as integer
  print "Joined the LoRa network\n"
  // change data rate from DR0 to DR1 to increase max payload
  dim temp$
  temp$ ="4"
  rc = LoraMacSetOption(LORAMAC_OPT_DATA_RATE, temp$) 
  
  TimerStart(0, 20000, 1)
endfunc 1

//==============================================================================
// Timer starts @ LoRa Joined with 60 seconds interval
// This timer will trigger to scan (resulting in LoRa Tx)
//==============================================================================
function HandlerTimer0() as integer
	rc = ResetScanTable()
    rc = BleScanStart(3000, 0)
endfunc 1

//-------------------------------------------------------------------------
// TxDone event - packet has been transmitted to the gateway
//-------------------------------------------------------------------------
function HandlerTxDone() as integer 
	print "TxDone\n"
endfunc 1

//------------------------------------------------------------------------------
// NoSync event - an RxWindow has closed after it failed to receive a sync pulse
//------------------------------------------------------------------------------
FUNCTION HandlerNoSync() As Integer
	print "NoSync\n"
endfunc 1
	
//==============================================================================
// This handler is called when there is a LoRa TX Complete event
//==============================================================================
function HandlerLoRaTxComp() as integer
	print "LoRa TX Complete Event\n"
endfunc 1

//==============================================================================
// This handler is called when there is a LoRa Tx Timeout event 
//==============================================================================
function HandlerLoRaTxTimeout() as integer
    str$ = "\nLoRa TX Timeout"
    PrintMsg(str$)
endfunc 1


//==============================================================================
// This handler is called when there is a LoRa Rx Timeout event
//==============================================================================
function HandlerLoRaRxTimeout() as integer
    str$ = "\nLoRa RX Timeout"
    PrintMsg(str$)
endfunc 1

//==============================================================================
// This handler is called when there is availale duty cycle on one of sub-band to send data  
//==============================================================================
FUNCTION HandlerNextTx() As Integer
    okToTx = 1
endfunc 1
	
//******************************************************************************
// Equivalent to main() in C
//******************************************************************************
OnEvent  EVUARTRX             call  HandlerUartRxCmd

OnEvent  EVBLE_SCAN_TIMEOUT       call HandlerBlrScanTimOut
OnEvent  EVBLE_ADV_REPORT         call HandlerAdvRpt

OnEvent  EVLORAMACJOINING         call HandlerLoRaJoining
OnEvent  EVLORAMACJOINED          call HandlerLoRaJoined
OnEvent  EVLORAMACTXDONE 		  call HandlerTxDone
ONEVENT  EVLORAMACNOSYNC 		  CALL HandlerNoSync
OnEvent  EVLORAMACTXCOMPLETE      call HandlerLoRaTxComp
OnEvent  EVLORAMACTXTIMEOUT   call  HandlerLoRaTxTimeout
OnEvent  EVLORAMACRXTIMEOUT   call  HandlerLoRaRxTimeout
OnEvent  EVLORAMACNEXTTX      call HandlerNextTx

OnEvent  EVTMR0                   call HandlerTimer0

// Welcome message
WelcomeMsg()

// Join LoRa with LORAMAC_JOIN_BY_REQUEST (Then, Ble scan can perform) 
rc=LORAMACJoin(LORAMAC_JOIN_BY_REQUEST)

waitevent 